from flask import Blueprint, request, redirect, url_for, render_template, send_from_directory, flash, current_app, send_file
import os
import time
import requests
import json
from flask import jsonify
import matplotlib.pyplot as plt
import io
import base64
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.units import inch
from reportlab.lib import colors


malware_detection = Blueprint('malware_detection', __name__)

API_KEY = 'e3e922a3b3f6a4c240ecde9f2890bdef6e534a2323c56cb119d1ead15347c303'
VT_API_URL = 'https://www.virustotal.com/api/v3/files'

def analyze_file(file_path):
    headers = {"x-apikey": API_KEY}
    files = {'file': (os.path.basename(file_path), open(file_path, 'rb'))}
    response = requests.post(VT_API_URL, headers=headers, files=files)
    if response.status_code == 200:
        result = response.json()
        if 'data' in result and 'id' in result['data']:
            analysis_id = result['data']['id']
            return poll_analysis_result(analysis_id)
        else:
            return result
    else:
        return {"error": response.status_code, "message": response.text}

def poll_analysis_result(analysis_id):
    headers = {"x-apikey": API_KEY}
    analysis_url = f"https://www.virustotal.com/api/v3/analyses/{analysis_id}"
    while True:
        response = requests.get(analysis_url, headers=headers)
        if response.status_code == 200:
            result = response.json()
            if 'data' in result and 'attributes' in result['data']:
                if result['data']['attributes']['status'] == 'completed':
                    return result
                else:
                    time.sleep(10)  # Poll every 10 seconds if not completed
            else:
                return {"error": "Unexpected response structure", "response": result}
        else:
            return {"error": response.status_code, "message": response.text}

def generate_graph(results):
    categories = {
        'undetected': 0,
        'malicious': 0,
        'suspicious': 0,
        'harmless': 0,
        'timeout': 0,
        'confirmed-timeout': 0,
        'failure': 0,
        'type-unsupported': 0
    }
    for engine, result in results.items():
        if result['category'] in categories:
            categories[result['category']] += 1

    labels = list(categories.keys())
    values = list(categories.values())

    plt.figure(figsize=(10, 6))
    plt.bar(labels, values, color='skyblue')
    plt.xlabel('Categories')
    plt.ylabel('Count')
    plt.title('Malware Analysis Results')
    plt.tight_layout()

    img = io.BytesIO()
    plt.savefig(img, format='png')
    img.seek(0)
    img_b64 = base64.b64encode(img.read()).decode('utf-8')
    plt.close()

    return img_b64


def generate_report(analysis, img_b64, malicious_percentage, undetected_percentage, type_unsupported_percentage,
                    failure_percentage, suspicious_percentage, harmless_percentage, timeout_percentage,
                    confirmed_timeout_percentage, malware_detections):
    report_path = os.path.join(current_app.config['UPLOAD_FOLDER'], 'analysis_report.pdf')

    try:
        doc = SimpleDocTemplate(report_path, pagesize=letter)
        styles = getSampleStyleSheet()
        story = []

        # Title
        story.append(Paragraph("Malware Analysis Report", styles['Title']))
        story.append(Spacer(1, 0.2 * inch))

        # Graph
        img_data = base64.b64decode(img_b64)
        img_file = io.BytesIO(img_data)
        img = Image(img_file, 6 * inch, 4 * inch)
        story.append(img)
        story.append(Spacer(1, 0.2 * inch))

        # File Information
        story.append(Paragraph("File Information", styles['Heading2']))
        file_info = [
            ['MD5', analysis['meta']['file_info']['md5']],
            ['SHA1', analysis['meta']['file_info']['sha1']],
            ['SHA256', analysis['meta']['file_info']['sha256']],
            ['Size', f"{analysis['meta']['file_info']['size']} bytes"]
        ]
        file_table = Table(file_info)
        file_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(file_table)
        story.append(Spacer(1, 0.2 * inch))

        # Analysis Overview
        story.append(Paragraph("Analysis Overview", styles['Heading2']))
        analysis_overview = [
            ['Date', analysis['data']['attributes']['date']],
            ['Status', analysis['data']['attributes']['status']],
            ['Undetected', analysis['data']['attributes']['stats']['undetected']],
            ['Malicious', analysis['data']['attributes']['stats']['malicious']],
            ['Type-unsupported', analysis['data']['attributes']['stats']['type-unsupported']],
            ['Failure', analysis['data']['attributes']['stats']['failure']],
            ['Suspicious', analysis['data']['attributes']['stats']['suspicious']],
            ['Harmless', analysis['data']['attributes']['stats']['harmless']],
            ['Timeout', analysis['data']['attributes']['stats']['timeout']],
            ['Confirmed-timeout', analysis['data']['attributes']['stats']['confirmed-timeout']]
        ]
        overview_table = Table(analysis_overview)
        overview_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(overview_table)
        story.append(Spacer(1, 0.2 * inch))

        # Engine Results
        story.append(Paragraph("Engine Results", styles['Heading2']))
        engine_results = [['Engine Name', 'Category', 'Engine Version', 'Engine Update', 'Method', 'Result']]
        for engine, details in analysis['data']['attributes']['results'].items():
            engine_results.append([details['engine_name'], details['category'], details['engine_version'],
                                   details['engine_update'], details['method'], details['result']])
        engine_table = Table(engine_results)
        engine_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(engine_table)
        story.append(Spacer(1, 0.2 * inch))

        # Consistency
        story.append(Paragraph("Consistency", styles['Heading2']))
        consistency = [
            ['Malicious Percentage', f"{malicious_percentage:.2f}%"],
            ['Undetected Percentage', f"{undetected_percentage:.2f}%"],
            ['Type-unsupported Percentage', f"{type_unsupported_percentage:.2f}%"],
            ['Failure Percentage', f"{failure_percentage:.2f}%"],
            ['Suspicious Percentage', f"{suspicious_percentage:.2f}%"],
            ['Harmless Percentage', f"{harmless_percentage:.2f}%"],
            ['Timeout Percentage', f"{timeout_percentage:.2f}%"],
            ['Confirmed-timeout Percentage', f"{confirmed_timeout_percentage:.2f}%"]
        ]
        consistency_table = Table(consistency)
        consistency =         consistency_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(consistency_table)
        story.append(Spacer(1, 0.2 * inch))

        # Detected Malware Names
        story.append(Paragraph("Detected Malware Names", styles['Heading2']))
        malware_table_data = [['Engine Name', 'Malware Name']]
        for engine, malware_name in malware_detections:
            malware_table_data.append([engine, malware_name])
        malware_table = Table(malware_table_data)
        malware_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(malware_table)
        story.append(Spacer(1, 0.2 * inch))

        doc.build(story)
        return report_path

    except Exception as e:
        print(f"Error generating report: {e}")
        return None



@malware_detection.route('/malware_detection')
def index():
    return render_template('index_malware.html')


@malware_detection.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        flash('No file part')
        return redirect(request.url)
    file = request.files['file']
    if file.filename == '':
        flash('No selected file')
        return redirect(request.url)
    if file and file.filename.endswith('.apk'):
        upload_folder = current_app.config['UPLOAD_FOLDER']
        if not os.path.exists(upload_folder):
            os.makedirs(upload_folder)
        file_path = os.path.join(upload_folder, file.filename)
        file.save(file_path)

        apk_name = os.path.basename(file.filename)  # Extract APK name

        analysis = analyze_file(file_path)
        if analysis:
            if "error" in analysis:
                flash(f"Error analyzing file: {analysis['message']}")
                return redirect(url_for('malware_detection.index'))
            img_b64 = generate_graph(analysis['data']['attributes']['results'])

            # Calculate consistency
            total_engines = len(analysis['data']['attributes']['results'])
            detected_malicious = sum(
                1 for result in analysis['data']['attributes']['results'].values() if result['category'] == 'malicious')
            detected_undetected = sum(1 for result in analysis['data']['attributes']['results'].values() if
                                      result['category'] == 'undetected')
            detected_type_unsupported = sum(1 for result in analysis['data']['attributes']['results'].values() if
                                            result['category'] == 'type-unsupported')
            detected_failure = sum(
                1 for result in analysis['data']['attributes']['results'].values() if result['category'] == 'failure')
            detected_suspicious = sum(1 for result in analysis['data']['attributes']['results'].values() if
                                      result['category'] == 'suspicious')
            detected_harmless = sum(
                1 for result in analysis['data']['attributes']['results'].values() if result['category'] == 'harmless')
            detected_timeout = sum(
                1 for result in analysis['data']['attributes']['results'].values() if result['category'] == 'timeout')
            detected_confirmed_timeout = sum(1 for result in analysis['data']['attributes']['results'].values() if
                                             result['category'] == 'confirmed-timeout')

            malicious_percentage = (detected_malicious / total_engines) * 100
            undetected_percentage = (detected_undetected / total_engines) * 100
            type_unsupported_percentage = (detected_type_unsupported / total_engines) * 100
            failure_percentage = (detected_failure / total_engines) * 100
            suspicious_percentage = (detected_suspicious / total_engines) * 100
            harmless_percentage = (detected_harmless / total_engines) * 100
            timeout_percentage = (detected_timeout / total_engines) * 100
            confirmed_timeout_percentage = (detected_confirmed_timeout / total_engines) * 100

            # Extract detected malware names and engines
            malware_detections = [
                (engine, details['result']) for engine, details in analysis['data']['attributes']['results'].items()
                if details['category'] == 'malicious'
            ]

            report_path = generate_report(
                analysis,
                img_b64,
                malicious_percentage,
                undetected_percentage,
                type_unsupported_percentage,
                failure_percentage,
                suspicious_percentage,
                harmless_percentage,
                timeout_percentage,
                confirmed_timeout_percentage,
                malware_detections
            )

            return render_template('malware_result.html',
                                   analysis=analysis,
                                   apk_name=apk_name,  # Pass APK name to the template
                                   img_b64=img_b64,
                                   malicious_percentage=malicious_percentage,
                                   undetected_percentage=undetected_percentage,
                                   type_unsupported_percentage=type_unsupported_percentage,
                                   failure_percentage=failure_percentage,
                                   suspicious_percentage=suspicious_percentage,
                                   harmless_percentage=harmless_percentage,
                                   timeout_percentage=timeout_percentage,
                                   confirmed_timeout_percentage=confirmed_timeout_percentage,
                                   malware_detections=malware_detections,
                                   report_path=report_path)

        else:
            flash('Error analyzing file')
            return redirect(url_for('malware_detection.index'))
    else:
        flash('Invalid file type')
        return redirect(url_for('malware_detection.index'))


@malware_detection.route('/download_report')
def download_report():
    report_path = request.args.get('report_path')

    # Debugging line to print report_path
    print(f"Report path received: {report_path}")

    if report_path and os.path.exists(report_path):
        return send_file(report_path, as_attachment=True)
    else:
        flash('Report file not found')
        return redirect(url_for('malware_detection.index'))


@malware_detection.route('/uploads/<filename>')
def uploaded_file(filename):
    return send_from_directory(current_app.config['UPLOAD_FOLDER'], filename)





